name: Deploy to Google Play

on:
  schedule:
    - cron: '0 0 */2 * *'  # Every 2 days at midnight UTC
  workflow_dispatch:       # Optional manual trigger

jobs:
  deploy-google-play:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get latest commit hash
        id: get_commit
        run: echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get last deployed commit hash from tag
        id: get_tag
        run: |
          if git rev-parse last-deployed >/dev/null 2>&1; then
            echo "last_commit=$(git rev-parse last-deployed)" >> $GITHUB_OUTPUT
          else
            echo "last_commit=none" >> $GITHUB_OUTPUT
          fi

      - name: Skip if already deployed
        if: steps.get_commit.outputs.commit_hash == steps.get_tag.outputs.last_commit
        run: |
          echo "Commit already deployed. Skipping."
          exit 0

      - name: Get latest release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (releases.length === 0) {
              core.setFailed('No releases found');
              return;
            }
            
            const latestRelease = releases[0];
            core.setOutput('release_id', latestRelease.id);
            core.setOutput('tag_name', latestRelease.tag_name);
            
            // Find the AAB file in release assets
            const aabAsset = latestRelease.assets.find(asset => 
              asset.name.includes('app-') && asset.name.endsWith('-release.aab')
            );
            
            if (!aabAsset) {
              core.setFailed('No AAB file found in latest release');
              return;
            }
            
            core.setOutput('aab_download_url', aabAsset.browser_download_url);
            core.setOutput('aab_name', aabAsset.name);

      - name: Download AAB from release
        run: |
          mkdir -p bundle/release
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -o "bundle/release/${{ steps.get_release.outputs.aab_name }}" \
            "${{ steps.get_release.outputs.aab_download_url }}"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      - name: Create Google Play JSON key file
        run: echo '${{ secrets.GOOGLE_PLAY_JSON_KEY }}' > google-play-key.json

      - name: Deploy to Google Play
        run: |
          bundle exec fastlane supply \
            --aab "bundle/release/${{ steps.get_release.outputs.aab_name }}" \
            --json_key google-play-key.json \
            --package_name com.presley.flexify \
            --track production

      - name: Tag latest commit as deployed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f last-deployed ${{ steps.get_commit.outputs.commit_hash }}
          git push origin refs/tags/last-deployed --force